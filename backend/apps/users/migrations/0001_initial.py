# Generated by Django 5.1.7 on 2025-03-30 19:25

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('image', models.ImageField(blank=True, null=True, upload_to='recipes_img/', validators=[django.core.validators.FileExtensionValidator(['jpg', 'jpeg', 'png']), django.core.validators.MaxValueValidator(5242880, message='Размер не может превышать 50 МБ')], verbose_name='Фотография блюда')),
                ('username', models.CharField(db_index=True, help_text='Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=50, unique=True, verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=50, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=50, verbose_name='last name')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('telegram', models.CharField(blank=True, help_text='Ваш никнейм в телеграм (начинается с @)', max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Строка должна начинаться с @', regex='^@')], verbose_name='Telegram')),
                ('telephone', models.CharField(blank=True, help_text='Введите ваш номер телефона', max_length=50, null=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть вформате: '+999999999'. Допустимо до 15 цифр.", regex='^\\+?1?\\d{9,15}$')], verbose_name='Телефон')),
                ('vk', models.CharField(blank=True, help_text='Введите ссылку на ваш профиль VK', max_length=50, null=True, validators=[django.core.validators.RegexValidator(message='Формат ссылки не соответствует требованиям', regex='^(https?:\\/\\/)?(www\\.)?vk\\.com\\/[a-zA-Z0-9_.]{1,}$')], verbose_name='VK')),
                ('ok', models.CharField(blank=True, help_text='Введите ссылку на ваш профиль в Одноклассниках', max_length=50, null=True, verbose_name='Одноклассники')),
                ('whatsapp', models.CharField(blank=True, help_text='Укажите номер телефона в WhatsApp', max_length=50, null=True, validators=[django.core.validators.RegexValidator(message="Номер телефона должен быть вформате: '+999999999'. Допустимо до 15 цифр.", regex='^\\+?1?\\d{9,15}$')], verbose_name='WhatsApp')),
                ('linkedin', models.CharField(blank=True, help_text='Введите ссылку на ваш профиль в LinkedIn', max_length=50, null=True, verbose_name='LinkedIn')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='customuser_groups', related_query_name='customuser', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='customuser_permissions', related_query_name='customuser', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ('id',),
                'constraints': [models.UniqueConstraint(condition=models.Q(('telegram__isnull', False)), fields=('telegram',), name='unique_telegram_when_not_null'), models.UniqueConstraint(condition=models.Q(('telephone__isnull', False)), fields=('telephone',), name='unique_telephone_when_not_null'), models.UniqueConstraint(condition=models.Q(('vk__isnull', False)), fields=('vk',), name='unique_vk_when_not_null'), models.UniqueConstraint(condition=models.Q(('ok__isnull', False)), fields=('ok',), name='unique_ok_when_not_null'), models.UniqueConstraint(condition=models.Q(('whatsapp__isnull', False)), fields=('whatsapp',), name='unique_whatsapp_when_not_null'), models.UniqueConstraint(condition=models.Q(('linkedin__isnull', False)), fields=('linkedin',), name='unique_linkedin_when_not_null')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
